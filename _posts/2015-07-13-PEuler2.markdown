---

layout: post
title:  "Day Three. Surprise, More Project Euler"
date:   2015-07-11 11:43:00
categories: Euler Haskell
---

>Hey you, out there in the cold getting lonely getting old can you help me? (Pink Floyd) 

And surprise, more Project Euler!

Some fun ones coming up today... Someone else should remind me to add disqus comments.

In Haskell of course:

### Problem 2
(Turns out I swapped 2 and 3)

>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

It's pretty easy to make an infinite list of Fibonacci numbers in haskell as follows.

{% highlight haskell %}
fib :: [Integer]
fib = 1:1:zipWith (+) (tail fib) fib
{% endhighlight %}

It's actually pretty efficient too since everything is memoized. So now we just need to do a `takeWhile` as follows to get everything bellow 4 million and then filter out the even terms:

{% highlight haskell %}
answerList = filter even . takeWhile (<= 4000000) fib
{% endhighlight %}

The final code (everything together) is below:

{% highlight haskell %}
fib :: [Integer]
fib = 1:1:zipWith (+) (tail fib) fib

main :: IO ()
main = print $ sum answerList 
	where answerList = filter even $ takeWhile (<=4000000) fib
{% endhighlight %}

That was interesting. Ish.

